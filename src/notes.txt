
(X : Ty₀, ω : Ωᴬ X)

Ωᴬ← ω : Tm₀ ((↓Ω)ᴬ X)

(Aᴬ→, Aᴬ←) : Tm₀ ((↓A)ᴬ X) ~ Aᴬ X
   ιᴬ→ : Tm₀ (ι₀ᴬ X) → ι₁ᴬ X

T : Ty₀
T := SigTm₀ ↓Ω ι

R : Tm₀ T → Tm₀ X
R t := tᴬ (Ωᴬ← ω)

-ᴿ : (A : SigTy₁)(t : Tm₀ (SigTm₀ ↓Ω ↓A)) → Aᴹ R (Aᵀ t) (Aᴬ→ (tᴬ (Ωᴬ← ω)))
ιᴿ t : tᴬ (Ωᴬ← ω) = ιᴬ→ (tᴬ (Ωᴬ← ω))
     : tᴬ (Ωᴬ← ω) = tᴬ (Ωᴬ← ω)
     refl

(ι→ A)ᴿ t : (ι→ A)ᴹ R ((ι→ A)ᵀ t) ((ι→ A)ᴬ→ (tᴬ (Ωᴬ← ω)))
          : (u : Tm₀ (SigTm₀ ↓Ω ι)) → Aᴹ R (Aᵀ (app t u)) (((ι→ A)ᴬ→ (tᴬ (Ωᴬ← ω))) (uᴬ (Ωᴬ← ω)))
          : (u : Tm₀ (SigTm₀ ↓Ω ι)) → Aᴹ R (Aᵀ (app t u)) (Aᴬ→ ((tᴬ (Ωᴬ← ω)) (uᴬ (Ωᴬ← ω))))
  := λ u. Aᴿ (app t u)   OK


Γᴬ X := ∀ {A}(x : Var₁ Γ A). Aᴬ X


-ᴹ : (Γ : Con₁){X₀ X₁}(Xᴹ : Tm₀ X₀ → Tm₀ X₁) → Γᴬ X₀ → Γᴬ X₁ → Set
Γᴹ Xᴹ γ₀ γ₁ := ∀ {A} x. Aᴹ Xᴹ (γ₀ x) (γ₀ x)

Γᵀ ν : Γᴬ T
     : ∀ {A} x. Aᴬ T

  Γᵀ ν {A} x : Aᴬ T

  ν : Sub₁ Ω Γ
  νᴬ : ∀ X. Ωᴬ X → Γᴬ X
  νᴬ ω : Γᴬ X


-ᴿ : (Γ : Con₁)(ν : Sub₁ Ω Γ) → Γᴹ R (Γᵀ ν) (νᴬ ω)
   : (Γ : Con₁)(ν : Sub₁ Ω Γ) → ∀ {A} x. Aᴹ R (Aᵀ (↓(ν x))) (νᴬ ω x)
Γᴿ ν {A} x :=
  ν x : Tm₁ Ω A
  ↓(ν x) : Tm₀ (Tm₀ ↓Ω ↓A)

  Aᴿ ↓(ν x) : Aᴹ R (Aᵀ (↓(ν x))) (Aᴬ→ (↓(ν x)ᴬ (Ωᴬ← ω)))

    goal : νᴬ ω x = Aᴬ→ (↓(ν x)ᴬ (Ωᴬ← ω))

       γ     : Γᴬ X
       Γᴬ← γ : Tm₀ ((↓Γ)ᴬ X)
       t     : SigTm₁ Γ A
       ↓t    : Tm₀ (SigTm₀ ↓Γ ↓A)
       (↓t)ᴬ : Tm₀ ((↓Γ)ᴬ X) → Tm₀ ((↓A) X)
       (↓t)ᴬ (Γᴬ← γ) : Tm₀ ((↓A) X)
       Aᴬ→ ((↓t)ᴬ (Γᴬ← γ)) : Aᴬ X

       tᴬ γ : Aᴬ X

       equation:
         tᴬ γ = Aᴬ→ ((↓t)ᴬ (Γᴬ← γ))

--------------------------------------------------------------------------------

-ᵀ : (t : Tm Γ A)(ν : Sub Ω Γ) → Aᵀ (t[ν]) = tᴬ (Γᵀ ν)

-ᵀ : (t : SigTm₀ (↓Γ) (↓A))(ν : Sub₁ Ω Γ) → Aᵀ (t[↓ν]) = Aᴬ→ (tᴬ (Γᴬ← (Γᵀ ν)))

-ᵀ : (t : SigTm₀ (↓Γ) (↓A))(ν : Sub₁ Ω Γ) → Tm₀ (Aᴬ← (Aᵀ (t[↓ν])) = tᴬ (Γᴬ← (Γᵀ ν)))


(X, ω) : Alg Ω

  X : U₀

(Xᴰ, ωᴰ) : DispAlg (X, ω)

Xᴰ : X → U₀

ωᴰ : Ωᴰ Xᴰ ω

   (↓Ω)ᴰ Xᴰ (Ωᴬ← ω)

  ω : Ωᴬ X            Tm₀ ((↓Ω)ᴬX) ≃ Ωᴬ X
  ωᴰ : Ωᴰ Xᴰ ω        Tm₀ ((↓Ω)ᴰ Xᴰ (Ωᴬ← ω)) ≃ Ωᴰ Xᴰ ω

   (↓Ω)ᴰ : T₀m (∀ X. (Tm₀ X → U₀) → (↓Ω)ᴬ X → U₀)

   Tm₀ ((↓Ω)ᴰ Xᴰ (Ωᴬ← ω)) ≃ Ωᴰ Xᴰ ω
   Tm₀ ((↓A)ᴰ Xᴰ (Aᴬ← α)) ≃ Aᴰ Xᴰ α


   t : Tm₁ Γ A

   γᴰ : Γᴰ Xᴰ γ

   tᴰ γᴰ : Aᴰ Xᴰ (tᴬ γ)

      Aᴰ→ ((↓t)ᴰ (Γᴰ← γᴰ))

      Γᴰ← γᴰ : Tm₀ ((↓Γ)ᴰ Xᴰ (Γᴬ← γ))

       (↓t) : Tm ↓Γ ↓A

       (↓t)ᴰ : Tm₀ ((↓Γ)ᴰ γᴰ) → Tm₀ ((↓A)ᴰ ((↓t)ᴬ γ))

       (↓t)ᴰ (Γᴰ← γᴰ) : Tm₀ ((↓A)ᴰ Xᴰ ((↓t)ᴬ (Γᴬ← γ)))
                      : Tm₀ ((↓A)ᴰ Xᴰ (Aᴬ← (tᴬ γ))

       tᴰ γᴰ = Aᴰ→ ((↓t)ᴰ (Γᴰ← γᴰ))

--------------------------------------------------------------------------------
-- Does it work to have
-- -ᴬ : Tm₀ ↓Γ ↓A → Γᴬ X → Aᴬ X  ?
-- No, because  if t = app t u : Tm Γ B, then the argument type is not statically known.

T := SigTm₀ ↓Ω ι


-- -ᴬ : SigTm₀ ↓Γ ↓A → Γᴬ X → Aᴬ X

-- -ᴬ : SigTm₀ Γ A → ∀ {Γ' A'} → Γ ≡ ↓Γ' → A ≡ ↓A' → Γ'ᴬ X → A'ᴬ X

-- (var x)ᴬ : ∀ {Γ' A'} → Γ ≡ ↓Γ' → A ≡ ↓A' → Γ'ᴬ X → A'ᴬ X
-- (app t u)ᴬ : ∀ {Γ' A'} → Γ ≡ ↓Γ' → A ≡ ↓A' → Γ'ᴬ X → A'ᴬ X

-ᴬ : SigTm₀ ↓Γ ↓A → Γᴬ X → Aᴬ X
(var vz) : ∀ {Γ' A'} → (Γ ▶ A) ≡ ↓Γ' → A ≡ ↓A' → Γ'ᴬ X → A'ᴬ X
         : (Γ' ▶ A')ᴬ X → A' X


app {A → B} t {A} u : Tm₀ Γ A

(app {Γ}{A}{B} t u)ᴬ : ∀ {Γ' A'} → Γ ≡ ↓Γ' → B ≡ ↓A' → Γ'ᴬ X → A'ᴬ X
                     : ∀ {Γ' A'} → Γ ≡ ↓Γ' → B ≡ ↓A' → Γ'ᴬ X → A'ᴬ X

    t : Tm₀ Γ (A ⇒ B)
    u : Tm₀ Γ A

    tᴬ : ∀ {Γ' A'} → Γ ≡ ↓Γ' → (A ⇒ B) ≡ ↓A' → Γ'ᴬ X → A'ᴬ X

--------------------------------------------------------------------------------

Σ type in isofibrant flcwf model

--------------------------------------------------------------------------------

a : Tm Γ U
b : Tm (Γ ▶ El a) U
goal: Σ a b : Tm Γ U    let's call it SGAB

SGAB Γ⁻ := (α : a Γ⁻) × b (Γ⁻, α)
SGAB σ⁻ := λ (α, β). (a σ⁻ α, b (σ⁻, refl) β)
SGAB A⁻ := λ (α, β). (α' : α A⁻ α) × b (A⁻, α') β
SGAB t⁻ := λ (α, β). (a t⁻ α, b (t⁻, refl) β)


  SGAB ∙⁻ ~ ⊤
  (α : a ∙⁻) × b (∙⁻, α) ~ ⊤

  SGAB (Γ⁻ ▶ A⁻) ~ (γ : SGAB Γ⁻) × SGAB A⁻ γ
                 ~ (α : a Γ⁻) × (β : b (Γ⁻, α)) × (α' : α A⁻ α) × (β' : b (A⁻, α') β)

  SGAB (Γ⁻ ▶ A⁻) =
    (α : a (Γ⁻ ▶ A)) × b (Γ⁻ ▶ A⁻, α)


-- TERM ALGEBRA OVERHAUL
--------------------------------------------------------------------------------

- It seems that lambda-encodings work fine in finitary semantics.
- We want to give a uniform definition for all term algebras, and a generalized
  definition for recursors n eliminators

SETUP:

- work in 2ltt, but split Ty₀ to Uᵢ cumulative universes, with cumulative subtyping

- Uᵢ closed under Π, Σ, ⊤ and extensional Id

- We don't track universe levels in the outer theory

- outer ToS models (ToSⱼ : Set) have sorts in Set and ext dep in Uⱼ
- inner ToS models (ToSᵢⱼ : U_(i + 1 ⊔ j + 1)) where sorts are in Uᵢ and ext dep are in Uⱼ
  ToS_ij ≤ ToS_(i+1)j

  however, in particular M : ToS_i_j we can possibly refine sort sizing, e.g.
  know that Tm is in U_i' for i' < i

  we have 2 indices to make bootstrapping easy

- assume outer ToS syntax synⱼ, where we have all sorts in Set, but external dependencies
  are in Uⱼ

- assume flcwf semantics Mᵢⱼ, where sorts are in Uᵢ, ext are in Uⱼ, and the whole model
  is in the inner theory, i.e. Mᵢⱼ : U_(((i+1)⊔j)+1) j
  + by having semantics wholly in inner theory, we can avoid preservation isomorphisms
    for lowering

- Prove alg cumulativity by outer induction: Γᴬᵢ ≤ Γᴬⱼ for i ≤ j

- heterogeneous morphisms: lift sides to the maximum, and have homogeneous morphism

- TODO: rename bold M_ij model everywhere to bold flcwf_ij


TERM ALGEBRAS

- 1. assume some model M : ToS_ij such that M.Tm Γ (El a) is in Uₖ
- 2. for Ω : Sig_j, we construct Ωᵀ id : Ωᴬₖ (underlying sorts are in Uₖ)

We use ↓_ to refer to interpretation of syn to M model, -ᴬ interp into Aₖ model

(Γ : Con)ᵀ     : (ν : M.Sub ↓Ω ↓Γ) → Γᴬ
(σ : Sub Γ Δ)ᵀ : (ν : M.Sub ↓Ω ↓Γ) → Δᵀ (↓σ ∘ ν) = σᴬ (Γᵀ ν)
(A : Ty Γ)ᵀ    : (ν : M.Sub ↓Ω ↓Γ)(t : M.Tm ↓Ω (↓A[ν])) → Aᴬ (Γᵀ ν)
(t : Tm Γ A)ᵀ  : (ν : M.Sub ↓Ω ↓Γ) → Aᵀ ν (↓t[ν]) = tᴬ (Γᵀ ν)


Uᵀ (ν : Sub ↓Ω ↓Γ) (a : M.Tm ↓Ω U) : Uᵢ
Uᵀ ν a := M.Tm ↓Ω (El a)                   OK

(El a)ᵀ ν (t : Tm ↓Ω (El ↓a[ν])) : Tm ↓Ω (El ↓a[ν])
(El a)ᵀ ν t := t  OK

--------------------------------------------------------------------------------

-- OK

* syntactic term algebras
  if we have synⱼ : ToS_(j + 1) j, we get term algs in Ωᴬ_(j + 1)

* predicative BB-encodings

  Take Aᵢ : ToS_((i+1 ⊔ j) + 1)_j

    - we know Aᵢ.Tm Γ (El a) :
       Γ : U(i+1 ⊔ j)
       a : Γ → Uᵢ

       (γ : Γ) → aᴬ γ : U (i + 1) ⊔ j
    - hence small terms are in U ((i + 1)⊔j)
    - We get Ωᵀ id : Ωᴬ_(i + 1 ⊔ j)

* impredicative BB-encodings

  assume U₀ impredicative

  take A₀ : ToS_((1 ⊔ j)+1)_j

               Γᴬ : U_((i ⊔ j)+1)
	       aᴬ : Γᴬ → U₀
     now, A₀.Tm Γ (El a) = (γ : Γᴬ) → aᴬ γ : U₀
     hence Ωᵀ id : Ωᴬ₀

* AFS endcoding
  same as BB-encoding


RECURSORS

  - we have M: ToS_i_j s.t. M.Tm Γ (El a) is in U_k
  - hence, Ωᵀ id : Ωᴬₖ

  - THEOREM: if we have k ≤ l and a (heterogeneous) model morphism from M to Aₗ, then
    for each ω : Ωᴬₗ, we have a morphism from (Ωᵀ id) to ω.

  ASSUME ω :  Ωᴬₗ,  F : Sub M Aₗ, ↓ : Sub Syn M

  σ : Sub Γ Δ
  σᴹₗ : Γᴹ γ₀ γ₁ → Δᴹ (σᴬ γ₀) (σᴬ γ₁)

  (Γ : Con)ᴿ     : (ν : Sub ↓Ω ↓Γ) → Γᴹ (F ν (Ωᵀ id)) (F ν ω)
  (σ : Sub Γ Δ)ᴿ : (ν : Sub ↓Ω ↓Γ) → Δᴿ (↓σ ∘ ν) = σᴹ (Γᴿ ν)
  (A : Ty Γ)ᴿ    : (ν : Sub ↓Ω ↓Γ)(t : Tm ↓Ω (↓A[ν])) → Aᴹ (F t (Ωᵀ id))(F t ω) (Γᴿ ν)
  (t : Tm Γ A)ᴿ  : (ν : Sub ↓Ω ↓Γ) → Aᴿ ν (↓t[ν]) = tᴬ (Γᴿ ν)

  Uᴿ : (ν : Sub ↓Ω ↓Γ)(a : M.Tm ↓Ω U) → Uᴹₗ (F a (Ωᵀ id) (F a ω)) (Γᴿ ν)
     : (ν : Sub ↓Ω ↓Γ)(a : M.Tm ↓Ω U) → F a (Ωᵀ id) → F a ω

     F a (Ωᵀ id) → F a ω

     a : M.Tm ↓Ω U
     F a : Ωᴬₗ → Uₗ

     F a (Ωᵀ id) : Uₗ

     a : Ωᴬₗ → Uₗ

     a (Ωᵀ id) → a ω

     aᴬ (Ωᵀ id) = M.Tm ↓Ω (El a)

     t : F a (Ωᵀ id)
       : M.Tm ↓Ω (El a)
     F t : (ω : Ωᴬ)


NOT EVEN BB ENCODINGS WORKS!

  TODO: figure out BB encoding



-- (t : Tm Γ A)ᵀ  : (ν : M.Sub ↓Ω ↓Γ) → Aᵀ ν (↓t[ν]) = tᴬ (Γᵀ ν)



Uᴹₗ (F a (Ωᵀ id) (F t ω)) (Γᴿ ν)

  Uᴿ : (ν : Sub ↓Ω ↓Γ)(a : M.Tm ↓Ω U) → Uᴹₗ (F a (Ωᵀ id) (F t ω)) (Γᴿ ν)
  Uᴿ ν a =
    goal :  F a (Ωᵀ id) → F t ω







  El ...


* syntax

    assume synⱼ : ToS_j+1_j
    assume ω : Ωᴬₗ for arbitrary ₗ

    we need: morphism from synⱼ to Aₗ
    - which we have by recursion  (OK)
     (recursion: there is heterogeneous morphism from synⱼ to any M : ToS_i_j)

* predicative BB-encoding

  Aᵢ : ToS_((i+1 ⊔ j) + 1)_j, but we know that Tm Γ El is in (i+1 ⊔ j)

  hence, we need morphism from Aᵢ to Aₗ for some l

    Aᵢ :
      Con = U_(i+1 ⊔ j)
      Ty Γ = Γ → U_(i+1 ⊔ j)
      Sub Γ Δ = Γ → Δ
      Tm Γ A = Π Γ A
      U γ = Uᵢ
      El a γ = a γ

    Aₗ :
      Con = U_(l+1 ⊔ j)
      Ty Γ = Γ → U_(l+1 ⊔ j)
      Sub Γ Δ = Γ → Δ
      Tm Γ A = Π Γ A
      U γ = Uₗ

    F : Sub Aᵢ Aₗ

    Con : U_(i+1 ⊔ j) → U_(l+1 ⊔ j)

       if i ≤ l, then we have function

    a : M.Tm ↓Ω U

    t : M.Tm ↓Ω (El a)     goal  (ω : Ωᴬₗ) → aᴬₗ ω

     F t : Aₗ.Tm (F ↓Ω) (F (El a))
     F t : Aₗ.Tm Ωᴬₗ (Aₗ.El (F a))
         : (ω : Ωᴬₗ) → F a ω

     F t ω : F a ω

     goal : aᴬₗ ω

------------------------------------------------------------

RECURSOR
    -

    - outer: Set, ToS signature in Set, we have induction
    - inner: Uᵢ cumulative

    - i : univ of inductive sorts
    - j : univ of external deps
    - k : univ of Tm

  - we have M: ToS_i_j  s.t.  M.Tm Γ (El a) is in U_k
  - hence, Ωᵀ id : Ωᴬₖ

  - THEOREM: if we have k ≤ l and a (heterogeneous) model morphism from M to Aₗ, then
    for each ω : Ωᴬₗ, we have a morphism from (Ωᵀ id) to ω.

  ASSUME ω :  Ωᴬₗ,  F : Sub M Aₗ, ↓ : Sub Syn M

  σ : Sub Γ Δ
  σᴹₗ : Γᴹ γ₀ γ₁ → Δᴹ (σᴬ γ₀) (σᴬ γ₁)

  (Γ : Con)ᴿ     : (ν : Sub ↓Ω ↓Γ) → Γᴹ (F ν (Ωᵀ id)) (F ν ω)
  (σ : Sub Γ Δ)ᴿ : (ν : Sub ↓Ω ↓Γ) → Δᴿ (↓σ ∘ ν) = σᴹ (Γᴿ ν)
  (A : Ty Γ)ᴿ    : (ν : Sub ↓Ω ↓Γ)(t : Tm ↓Ω (↓A[ν])) → Aᴹ (F t (Ωᵀ id))(F t ω) (Γᴿ ν)
  (t : Tm Γ A)ᴿ  : (ν : Sub ↓Ω ↓Γ) → Aᴿ ν (↓t[ν]) = tᴬ (Γᴿ ν)

  Uᴿ : (ν : Sub ↓Ω ↓Γ)(a : M.Tm ↓Ω U) → Uᴹₗ (F a (Ωᵀ id) (F a ω)) (Γᴿ ν)
     : (ν : Sub ↓Ω ↓Γ)(a : M.Tm ↓Ω U) → F a (Ωᵀ id) → F a ω


-- HIIT AMDS notes
--------------------------------------------------------------------------------

- strict vs weak signatures
- strict: same as IQII, but intensional Id in U, + intensional large Id

- weak: Σ, Πⁱⁿᶠ, Π specced as equivalences up to Id
  Id-s have weak β


-- strict HIITs: no J!
--------------------------------------------------------------------------------

refl t : Tm Γ (El (Id a t t))

(refl t)ᴹ γᴹ : (El (Id a t t))ᴹ ((refl t)ᴬ γ₀) ((refl t)ᴬ γ₁) γᴹ
             : (Id a t t)ᴹ γᴹ refl ≡ refl
	     : ap (aᴹ γᴹ) refl ≡ refl  OK

------------------------------------------------------------

p : Tm Γ (El (Id a t u))
q : Tm Γ (El (Id a u v))

(p ◾ q)ᴬ γ : t γ = v γ
           = pᴬ γ ◾ qᴬ γ


(p ◾ q) : Tm Γ (El (Id a t v))

(p ◾ q)ᴹ γᴹ : (El (Id a t v))ᴹ ((p ◾ q)ᴬ γ₀) ((p ◾ q)ᴬ γ₁) γᴹ
            : (Id a t v)ᴹ γ₀ ((p ◾ q)ᴬ γ₀) ≡ ((p ◾ q)ᴬ γ₁)
	    : ap (aᴹ γᴹ) ((p ◾ q)ᴬ γ₀) ≡ ((p ◾ q)ᴬ γ₁)
	    : ap (aᴹ γᴹ) (pᴬ γ₀ ◾ qᴬ γ₀) ≡ (pᴬ γ₁ ◾ qᴬ γ₁)
	    : ap (aᴹ γᴹ) (pᴬ γ₀ ◾ qᴬ γ₀) ≡ (ap (aᴹ γᴹ) (pᴬ γ₀) ◾ ap (aᴹ γᴹ) (qᴬ γ₀))

pᴹ γᴹ : ap (aᴹ γᴹ) (pᴬ γ₀) ≡ pᴬ γ₁
qᴹ γᴹ : ap (aᴹ γᴹ) (qᴬ γ₀) ≡ qᴬ γ₁

FAIL (but could work in some cubicaltts!)

------------------------------------------------------------

J b pr {u} p : Tm Γ (El (b[u ↦ u, p ↦ p])

(J b pr p)ᴹ γᴹ : (El (b[u ↦ u, p ↦ p]))ᴹ ((J b pr p)ᴬ γ₀) ((J b pr p)ᴬ γ₁) γᴹ
               : (b[u ↦ u, p ↦ p])ᴹ γᴹ ((J b pr p)ᴬ γ₀) ≡ ((J b pr p)ᴬ γ₁)
	       : bᴹ (γᴹ, uᴹ, pᴹ) ((J b pr p)ᴬ γ₀) ≡ ((J b pr p)ᴬ γ₁)
	       : bᴹ (γᴹ, uᴹ, pᴹ) (J (λ u p. bᴬ (γ₀, u, p)) (prᴬ γ₀) (pᴬ γ₀)) ≡
	                         (J (λ u p. bᴬ (γ₁, u, p)) (prᴬ γ₁) (pᴬ γ₁))

  t u : Tm Γ (El a)
  p   : Tm Γ (El (Id t u))

  pᴬ γ₀ : tᴬ γ₀ = uᴬ γ₀   -- eq0
  pᴬ γ₁ : tᴬ γ₁ = uᴬ γ₁   -- eq1

  tᴹ γᴹ : aᴹ γᴹ (tᴬ γ₀) ≡ tᴬ γ₁
  uᴹ γᴹ : aᴹ γᴹ (tᴬ γ₀) ≡ tᴬ γ₁
  pᴹ γᴹ : ap (aᴹ γᴹ) (pᴬ γ₀) ≡ pᴬ γ₁  -- eqᴹ

  bᴹ (γᴹ, uᴹ, pᴹ) (J (λ u p. bᴬ (γ₀, u, p)) (prᴬ γ₀) (pᴬ γ₀)) ≡
                  (J (λ u p. bᴬ (γ₁, u, p)) (prᴬ γ₁) (pᴬ γ₁))


  FAIL

  bᴹ (γᴹ, uᴹ, pᴹ) (J (λ u p. bᴬ (γ₀, u, p)) (prᴬ γ₀) (pᴬ γ₀)) ≡
                  (J (λ u p. bᴬ (γ₁, u, p)) (prᴬ γ₁) (ap (aᴹ γᴹ) (pᴬ γ₀)))

  bᴹ (γᴹ, uᴹ, pᴹ) (J (λ u p. bᴬ (γ₀, u, p)) (prᴬ γ₀) refl) ≡
                  (J (λ u p. bᴬ (γ₁, u, p)) (prᴬ γ₁) (ap (aᴹ γᴹ) refl))

  bᴹ (γᴹ, tᴹ, refl) (prᴬ γ₀) ≡ (prᴬ γ₁)


  pr : Tm Γ (El (b[u → t, p ↦ refl]))

  prᴹ γᴹ : bᴹ (γᴹ, tᴹ, refl) (prᴬ γ₀) ≡ (prᴬ γ₁) would be OK, but we fail because we can't eliminate
           from pᴬ to strict equality!


--------------------------------------------------------------------------------

- Intro
- Fixup cites, refs
- Harmonize, link
- Add related work to chaps + discuss differences to my source papers
- Artifacts:
  - agda for simple sigs
  - agda for HIIT AMDS
  - hiit-signature computation
  - add refs

- Sig semantics of sigs
  - Add IQII model constructions using this


--------------------------------------------------------------------------------

- sig semantics, small colimits
- introduction
- update related work src comparisons in the end
